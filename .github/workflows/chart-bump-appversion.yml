name: Chart Bump appVersion
concurrency:
  group: cba-${{ github.repository }}

on:
  workflow_call:
    inputs:
      helm_release_namespace:
        description: Kubernetes namespace corresponding to a Helm release, e.g. 'development', 'staging'.
        required: true
        type: string
      helm_release_prefix:
        description: The prefix used for the Helm release, e.g. 'slate-portal', 'slate-api'.
        required: true
        type: string
      python_packages:
        description: The pip packages to use.
        required: false
        default: |
          pyyaml==6.0
          semver==2.13.0
        type: string
      python_version:
        description: The version of Python to use, e.g. 3.9.
        required: false
        default: 3.9
        type: string

    secrets:
      gc_compute_zone:
        description: The Google Cloud Compute Zone where the assets reside.
        required: true
      gc_gke_cluster:
        description: The cluster name on the Google Kubernetes Engine (GKE).
        required: true
      gc_service_account:
        description: The Google Cloud Service Account tied to the WIP.
        required: true
      gc_workload_identity_provider:
        description: The Google Cloud Workload Identity Provider (WIP).
        required: true

env:
  PRERELEASE_DATETIME_SUFFIX: "%Y%m%d-%H%M%S"
  SLATE_GITHUB_ACTIONS_BRANCH: master
  SLATE_GITHUB_ACTIONS_RAWCONTENT_URL: https://raw.githubusercontent.com/slateci/github-actions

jobs:
  bump-appversion:
    name: Bump appVersion
    runs-on: ubuntu-20.04

    permissions:
      contents: write
      id-token: write

    steps:
      - name: "Chosen environment: development"
        if: ${{ inputs.helm_release_namespace == 'development' }}
        run: |-
          echo "GIT_REF=refs/heads/develop" >> $GITHUB_ENV
          echo "HELM_RELEASE_NAMESPACE_SHORTHAND=dev" >> $GITHUB_ENV

      - name: "Chosen environment: staging"
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        run: |-
          echo "GIT_REF=refs/heads/master" >> $GITHUB_ENV
          echo "HELM_RELEASE_NAMESPACE_SHORTHAND=staging" >> $GITHUB_ENV

      - name: "Chosen environment: production"
        if: ${{ inputs.helm_release_namespace == 'production' }}
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            message = "This workflow is not appropriate for the production environment."
            error(message)
            raise Exception(message)

      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: ./${{ inputs.helm_release_namespace }}
          ref: ${{ env.GIT_REF }}

      - name: Check out repo develop branch (Staging)
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: ./development
          ref: refs/heads/develop

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Set Up Tools
        uses: slateci/github-actions/.github/actions/gcloud-helm-setup@master
        with:
          cluster_name: ${{ secrets.gc_gke_cluster }}
          location: ${{ secrets.gc_compute_zone }}
          service_account: ${{ secrets.gc_service_account }}
          workload_identity_provider: ${{ secrets.gc_workload_identity_provider }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python_version }}

      - name: Install Python packages
        uses: BSFishy/pip-action@v1
        with:
          packages: ${{ inputs.python_packages }}

      - name: Download workflow dependencies
        run: |-
          # Python files
          for FILENAME in semver-bump.py semver-compare.py
          do
            curl -fsSL ${{ env.SLATE_GITHUB_ACTIONS_RAWCONTENT_URL }}/${{ env.SLATE_GITHUB_ACTIONS_BRANCH }}/scripts/$FILENAME -o $FILENAME
          done

      - name: Find Release Version (Dev)
        if: ${{ inputs.helm_release_namespace == 'development' }}
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import yaml
            
            with open("./${{ inputs.helm_release_namespace }}/Chart.yaml") as stream:
              try:
                data_loaded = yaml.safe_load(stream)
              except yaml.YAMLError as ex:
                raise ex
              app_version = data_loaded["appVersion"]
            
            print(f"Setting RELEASE_VERSION to: {app_version}")
            set_env("RELEASE_VERSION", app_version)

      - name: Find Release Version (Staging)
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import semver
            import yaml
            
            with open("./${{ inputs.helm_release_namespace }}/Chart.yaml") as stream:
              try:
                data_loaded = yaml.safe_load(stream)
              except yaml.YAMLError as ex:
                raise ex
              app_version = data_loaded["appVersion"]
            
            new_versioninfo = semver.VersionInfo.parse(app_version).finalize_version()
            print(f"Setting RELEASE_VERSION to: {str(new_versioninfo)}")
            set_env("RELEASE_VERSION", str(new_versioninfo))

      - id: compare-versions
        name: Compare Deployed & Source Release Versions
        env:
          HELM_RELEASE_NAMESPACE: ${{ inputs.helm_release_namespace }}
          HELM_RELEASE_PREFIX: ${{ inputs.helm_release_prefix }}
        run: |-
          python semver-compare.py

      - id: bump-version
        name: Bump Release Version
        if: ${{ steps.compare-versions.outputs.ahead == 'false' }}
        env:
          HELM_RELEASE_NAMESPACE: ${{ inputs.helm_release_namespace }}
          HELM_RELEASE_PREFIX: ${{ inputs.helm_release_prefix }}
        run: |-
          python semver-bump.py

      - name: Apply Release Version (Dev - behind)
        if: ${{ inputs.helm_release_namespace == 'development' && steps.compare-versions.outputs.ahead == 'false' }}
        working-directory: ./${{ inputs.helm_release_namespace }}
        run: |-
          sed -i 's/^appVersion:.*$/appVersion: "${{ steps.bump-version.outputs.version }}"/g' Chart.yaml
          git add Chart.yaml
          git commit -m '(github-action) Increment appVersion: ${{ steps.bump-version.outputs.version }}'
          git push

      - id: release-version-staging
        name: Apply Release Version (Staging)
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        working-directory: ./development
        run: |-
          if [[ '${{ steps.compare-versions.outputs.ahead }}' == 'true' ]]
          then
            NEW_VERSION="${{ env.RELEASE_VERSION }}"
          else
            NEW_VERSION="${{ steps.bump-version.outputs.version }}"
          fi
          
          sed -i "s/^appVersion:.*$/appVersion: \"$NEW_VERSION\"/g" Chart.yaml
          git add Chart.yaml
          git commit -m "(github-action) Increment appVersion: ${NEW_VERSION}"
          git push

      - name: Merge develop to master branch (Staging)
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        working-directory: ./${{ inputs.helm_release_namespace }}
        run: |-
          git fetch
          git merge origin/develop --commit -m '(github-action) Merge develop with master' --no-ff
          git push

      - id: force-bump-version-staging
        name: Force-bump Release Version on develop branch (Staging)
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        uses: jannekem/run-python-script-action@v1
        with:
          script: |
            import semver
            import yaml
            
            from datetime import datetime
            
            prerelease_datetime_suffix = os.environ.get('PRERELEASE_DATETIME_SUFFIX')
            
            with open("./development/Chart.yaml") as stream:
              try:
                data_loaded = yaml.safe_load(stream)
              except yaml.YAMLError as ex:
                raise ex
              app_version = data_loaded["appVersion"]
            
            discovered_versioninfo = semver.VersionInfo.parse(app_version)
            new_versioninfo = discovered_versioninfo.finalize_version().bump_patch()
            now = datetime.now()
            date_time = now.strftime(prerelease_datetime_suffix)
            new_app_version = f"{str(new_versioninfo)}-pre.{date_time}"
            print(f"New appVersion is: {new_app_version}")
            set_output("version", new_app_version)

      - name: Force-apply Release Version on develop branch (Staging)
        if: ${{ inputs.helm_release_namespace == 'staging' }}
        working-directory: ./development
        run: |-
          sed -i 's/^appVersion:.*$/appVersion: "${{ steps.force-bump-version-staging.outputs.version }}"/g' Chart.yaml
          git add Chart.yaml
          git commit -m '(github-action) Increment appVersion: ${{ steps.force-bump-version-staging.outputs.version }}'
          git push
